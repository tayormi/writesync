((a,b,c)=>{a[b]=a[b]||{}
a[b][c]=a[b][c]||[]
a[b][c].push({p:"main.dart.js_23",e:"beginPart"})})(self,"$__dart_deferred_initializers__","eventLog")
$__dart_deferred_initializers__.current=function(a,b,c,$){var B,D,A={
Ds(){D.b.m($.bi,new A.ua())},
eX:function eX(d){this.a=d},
ua:function ua(){}},C
B=c[0]
D=c[2]
A=a.updateHolder(c[14],A)
C=c[27]
A.eX.prototype={
G(d){return this.G(0)},
gK(d){return"Building Accessible Web Apps with Jaspr"},
ga6(){return"web_accessibility"},
gU(){return B.bP("2024-03-18")},
ga2(){return B.a(["accessibility","web","jaspr","a11y"],x.d)},
gah(d){return y.a},
gY(){return"Alex Thompson"},
ga0(){return"https://images.unsplash.com/photo-1508921912186-1d1a45ebb3c1"},
ga3(){return"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d"},
gan(d){return"<h1>Building Accessible Web Apps with Jaspr</h1>\n<p>\nWeb accessibility is not just a nice-to-have feature\u2014it\\'s a necessity. In this guide, we\\'ll explore how to make your Jaspr applications accessible to all users, including those who rely on assistive technologies.</p>\n<h2>Understanding Web Accessibility</h2>\n<p>\nAccessibility (often abbreviated as a11y) ensures that your web applications are usable by everyone, including people with:</p>\n<p>- Visual impairments</p>\n<p>- Hearing impairments</p>\n<p>- Motor impairments</p>\n<p>- Cognitive impairments</p>\n<h2>ARIA Attributes in Jaspr</h2>\n<p>\nHere\\'s how to implement ARIA attributes in your Jaspr components:</p>\n<pre><code class=\"language-dart\">div(\n  attributes: {\n    \\'role\\': \\'alert\\',\n    \\'aria-live\\': \\'polite\\',\n    \\'aria-atomic\\': \\'true\\',\n  },\n  [\n    text(\\'Important notification\\'),\n  ],\n)\n</code></pre>\n<h2>Semantic HTML</h2>\n<p>\nUsing semantic HTML is crucial for accessibility. Here\\'s how to structure your content:</p>\n<pre><code class=\"language-dart\">article(\n  classes: \\'blog-post\\',\n  [\n    header([\n      h1([text(\\'Main Title\\')]),\n      p(classes: \\'meta\\', [text(\\'Posted on March 18, 2024\\')]),\n    ]),\n    main([\n      section([\n        h2([text(\\'Introduction\\')]),\n        p([text(\\'Content goes here...\\')]),\n      ]),\n    ]),\n    footer([\n      nav(\n        attributes: {\\'aria-label\\': \\'Post navigation\\'},\n        [\n          // Navigation links\n        ],\n      ),\n    ]),\n  ],\n)\n</code></pre>\n<h2>Keyboard Navigation</h2>\n<p>\nEnsure your application is fully navigable using only a keyboard:</p>\n<pre><code class=\"language-dart\">button(\n  classes: \\'focus:ring-2 focus:ring-blue-500 focus:outline-none\\',\n  attributes: {\n    \\'tabindex\\': \\'0\\',\n    \\'role\\': \\'button\\',\n    \\'aria-pressed\\': \\'false\\',\n  },\n  events: {\n    \\'keydown\\': (event) {\n      if (event.keyCode == KeyCode.enter || \n          event.keyCode == KeyCode.space) {\n        // Handle activation\n      }\n    },\n  },\n  [text(\\'Click me\\')],\n)\n</code></pre>\n<h2>Color Contrast</h2>\n<p>\nEnsure sufficient color contrast for text and interactive elements:</p>\n<pre><code class=\"language-dart\">// Good contrast\ndiv(\n  classes: \\'\\'\\'\n    text-gray-900 dark:text-white\n    bg-white dark:bg-gray-800\n  \\'\\'\\',\n  [\n    text(\\'High contrast text\\'),\n  ],\n)\n\n// Bad contrast - avoid\ndiv(\n  classes: \\'text-gray-400 bg-gray-200\\',\n  [\n    text(\\'Low contrast text\\'),\n  ],\n)\n</code></pre>\n<h2>Focus Management</h2>\n<p>\nImplement proper focus management for dynamic content:</p>\n<pre><code class=\"language-dart\">class AccessibleDialog extends StatefulComponent {\n  @override\n  State&lt;AccessibleDialog&gt; createState() =&gt; _AccessibleDialogState();\n}\n\nclass _AccessibleDialogState extends State&lt;AccessibleDialog&gt; {\n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    yield div(\n      attributes: {\n        \\'role\\': \\'dialog\\',\n        \\'aria-modal\\': \\'true\\',\n        \\'aria-labelledby\\': \\'dialog-title\\',\n      },\n      [\n        h2(\n          id: \\'dialog-title\\',\n          [text(\\'Dialog Title\\')],\n        ),\n        // Dialog content\n        div(\n          attributes: {\\'tabindex\\': \\'-1\\'},\n          events: {\n            \\'focus\\': (event) {\n              // Trap focus within dialog\n            },\n          },\n          [],\n        ),\n      ],\n    );\n  }\n}\n</code></pre>\n<h2>Screen Reader Announcements</h2>\n<p>\nImplement screen reader announcements for dynamic updates:</p>\n<pre><code class=\"language-dart\">class LiveRegion extends StatefulComponent {\n  final String message;\n  \n  LiveRegion({required this.message});\n  \n  @override\n  State&lt;LiveRegion&gt; createState() =&gt; _LiveRegionState();\n}\n\nclass _LiveRegionState extends State&lt;LiveRegion&gt; {\n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    yield div(\n      attributes: {\n        \\'aria-live\\': \\'polite\\',\n        \\'aria-atomic\\': \\'true\\',\n        \\'class\\': \\'sr-only\\', // Visually hidden\n      },\n      [text(component.message)],\n    );\n  }\n}\n</code></pre>\n<h2>Form Accessibility</h2>\n<p>\nMake your forms accessible with proper labels and error handling:</p>\n<pre><code class=\"language-dart\">form(\n  attributes: {\\'novalidate\\': \\'true\\'},\n  [\n    div(classes: \\'form-group\\', [\n      label(\n        attributes: {\\'for\\': \\'email\\'},\n        [text(\\'Email address\\')],\n      ),\n      input(\n        [],\n        attributes: {\n          \\'id\\': \\'email\\',\n          \\'type\\': \\'email\\',\n          \\'aria-required\\': \\'true\\',\n          \\'aria-invalid\\': \\'false\\',\n          \\'aria-describedby\\': \\'email-error\\',\n        },\n      ),\n      div(\n        id: \\'email-error\\',\n        classes: \\'error-message\\',\n        attributes: {\\'role\\': \\'alert\\'},\n        [],\n      ),\n    ]),\n  ],\n)\n</code></pre>\n<h2>Testing Accessibility</h2>\n<p>\nHere are some ways to test your application\\'s accessibility:</p>\n<p>1. <strong>Automated Testing</strong></p>\n<pre><code class=\"language-dart\">test(\\'Component meets accessibility standards\\', () {\n  // Implement accessibility checks\n  expect(component.getAttribute(\\'role\\'), isNotNull);\n  expect(component.getAttribute(\\'aria-label\\'), isNotNull);\n});\n</code></pre>\n<p>\n2. <strong>Manual Testing</strong></p>\n<p>- Use keyboard navigation</p>\n<p>- Test with screen readers</p>\n<p>- Verify color contrast</p>\n<p>- Check focus management</p>\n<h2>Best Practices</h2>\n<p>1. <strong>Structure</strong></p>\n<p>- Use semantic HTML</p>\n<p>- Implement proper heading hierarchy</p>\n<p>- Provide skip links</p>\n<p>\n2. <strong>Interactive Elements</strong></p>\n<p>- Ensure keyboard accessibility</p>\n<p>- Maintain visible focus indicators</p>\n<p>- Use proper ARIA roles</p>\n<p>\n3. <strong>Content</strong></p>\n<p>- Write clear, concise text</p>\n<p>- Provide text alternatives for images</p>\n<p>- Use sufficient color contrast</p>\n<h2>Resources</h2>\n<p>1. <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\">Web Content Accessibility Guidelines (WCAG)</a>\n2. <a href=\"https://www.w3.org/WAI/ARIA/apg/\">WAI-ARIA Practices</a>\n3. <a href=\"https://docs.page/schultek/jaspr\">Jaspr Accessibility Documentation</a>\n4. <a href=\"https://www.a11yproject.com/\">A11y Project</a></p>"},
gam(){return"/blog/web_accessibility"},
gaf(){return y.a},
gT(d){return null},
$ia4:1}
var z=a.updateTypes(["eX()"])
A.ua.prototype={
$0(){return C.ai},
$S:z+0};(function inheritance(){var w=a.inherit
w(A.eX,B.w)
w(A.ua,B.ba)})()
B.bW(b.typeUniverse,JSON.parse('{"eX":{"a4":[],"w":[]}}'))
var y={a:"Learn how to create inclusive web applications using Jaspr, ensuring your apps are accessible to all users regardless of their abilities."}
var x={d:B.aa("F<c>")};(function constants(){C.ai=new A.eX(null)})()};
((a,b)=>{a[b]=a.current
a.eventLog.push({p:"main.dart.js_23",e:"endPart",h:b})})($__dart_deferred_initializers__,"Y6MjPrRLa1l+ZeMhPTOW8ZYWtv4=");
//# sourceMappingURL=main.dart.js_23.part.js.map

((a,b,c)=>{a[b]=a[b]||{}
a[b][c]=a[b][c]||[]
a[b][c].push({p:"main.dart.js_1",e:"beginPart"})})(self,"$__dart_deferred_initializers__","eventLog")
$__dart_deferred_initializers__.current=function(a,b,c,$){var B,D,A={
Dn(){D.b.m($.bf,new A.u6())},
eM:function eM(d){this.a=d},
u6:function u6(){}},C
B=c[0]
D=c[2]
A=a.updateHolder(c[3],A)
C=c[16]
A.eM.prototype={
F(d){return this.F(0)},
gJ(d){return"Advanced Dart Design Patterns"},
ga4(){return"advanced-dart-patterns"},
gU(){return B.bP("2024-02-02")},
ga0(){return B.a(["dart","patterns","architecture","advanced"],x.d)},
gah(d){return y.d},
gY(){return"Jane Smith"},
gZ(){return"https://images.unsplash.com/photo-1555066931-4365d14bab8c"},
ga1(){return null},
gal(d){return"<h1>Advanced Dart Design Patterns</h1>\n<p>\nDesign patterns are reusable solutions to common problems in software design. Let\\'s explore some advanced patterns in Dart.</p>\n<h2>Factory Pattern</h2>\n<p>\nThe Factory pattern provides an interface for creating objects without exposing the instantiation logic.</p>\n<pre><code class=\"language-dart\">abstract class Animal {\n  String makeSound();\n}\n\nclass Dog implements Animal {\n  @override\n  String makeSound() =&gt; \\'Woof!\\';\n}\n\nclass Cat implements Animal {\n  @override\n  String makeSound() =&gt; \\'Meow!\\';\n}\n\nclass AnimalFactory {\n  static Animal createAnimal(String type) {\n    switch (type.toLowerCase()) {\n      case \\'dog\\':\n        return Dog();\n      case \\'cat\\':\n        return Cat();\n      default:\n        throw ArgumentError(\\'Unknown animal type\\');\n    }\n  }\n}\n</code></pre>\n<h2>Singleton Pattern</h2>\n<p>\nEnsure a class has only one instance and provide a global point of access to it.</p>\n<pre><code class=\"language-dart\">class DatabaseConnection {\n  static final DatabaseConnection _instance = DatabaseConnection._internal();\n  \n  // Private constructor\n  DatabaseConnection._internal();\n  \n  // Factory constructor\n  factory DatabaseConnection() {\n    return _instance;\n  }\n  \n  Future&lt;void&gt; query(String sql) async {\n    // Database query implementation\n  }\n}\n</code></pre>\n<h2>Observer Pattern</h2>\n<p>\nDefine a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.</p>\n<pre><code class=\"language-dart\">abstract class Subject {\n  void attach(Observer observer);\n  void detach(Observer observer);\n  void notify();\n}\n\nabstract class Observer {\n  void update(String message);\n}\n\nclass NewsAgency implements Subject {\n  final List&lt;Observer&gt; _observers = [];\n  String _news = \\'\\';\n\n  void attach(Observer observer) =&gt; _observers.add(observer);\n  void detach(Observer observer) =&gt; _observers.remove(observer);\n  \n  void notify() {\n    for (var observer in _observers) {\n      observer.update(_news);\n    }\n  }\n\n  set news(String value) {\n    _news = value;\n    notify();\n  }\n}\n\nclass NewsChannel implements Observer {\n  final String name;\n  \n  NewsChannel(this.name);\n\n  @override\n  void update(String news) {\n    print(\\'$name received news: $news\\');\n  }\n}\n</code></pre>\n<h2>Pattern Comparison</h2>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Purpose</th>\n<th>Complexity</th>\n<th>Use Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Factory</td>\n<td>Object creation</td>\n<td>Low</td>\n<td>When object creation logic should be centralized</td>\n</tr>\n<tr>\n<td>Singleton</td>\n<td>Single instance</td>\n<td>Low</td>\n<td>Database connections, Configuration</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>Event handling</td>\n<td>Medium</td>\n<td>UI updates, Event systems</td>\n</tr>\n<tr>\n<td>Builder</td>\n<td>Complex object construction</td>\n<td>Medium</td>\n<td>Objects with many optional parameters</td>\n</tr>\n<tr>\n<td>Strategy</td>\n<td>Algorithm encapsulation</td>\n<td>Medium</td>\n<td>Different algorithms at runtime</td>\n</tr>\n</tbody>\n</table>\n<h2>Implementation Flow</h2>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Client Code] --&gt; B{Factory Pattern}\n    B --&gt;|Create| C[Product A]\n    B --&gt;|Create| D[Product B]\n    E[Observer] --&gt; F{Subject}\n    F --&gt;|Notify| G[Observer 1]\n    F --&gt;|Notify| H[Observer 2]\n    I[Singleton] --&gt; J[Single Instance]\n</code></pre>\n<h2>Best Practices</h2>\n<p>1. <strong>SOLID Principles</strong></p>\n<pre><code class=\"language-dart\">// Single Responsibility Principle\nclass UserRepository {\n  final Database _db;\n  \n  UserRepository(this._db);\n  \n  Future&lt;User&gt; getUser(String id) async {\n    // Database logic only\n    return _db.query(\\'users\\', id);\n  }\n}\n</code></pre>\n<p>\n2. <strong>Dependency Injection</strong></p>\n<pre><code class=\"language-dart\">class UserService {\n  final UserRepository _repository;\n  final AuthService _auth;\n  \n  UserService(this._repository, this._auth);\n  \n  Future&lt;User&gt; getCurrentUser() async {\n    final userId = _auth.currentUserId;\n    return _repository.getUser(userId);\n  }\n}\n</code></pre>\n<h2>Performance Considerations</h2>\n<p>\nHere\\'s a comparison of different pattern implementations:</p>\n<table>\n<thead>\n<tr>\n<th>Implementation</th>\n<th>Memory Usage</th>\n<th>CPU Usage</th>\n<th>Initialization Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lazy Singleton</td>\n<td>Low</td>\n<td>Low</td>\n<td>On-demand</td>\n</tr>\n<tr>\n<td>Eager Singleton</td>\n<td>Medium</td>\n<td>Low</td>\n<td>At startup</td>\n</tr>\n<tr>\n<td>Factory Method</td>\n<td>Low</td>\n<td>Medium</td>\n<td>Per instance</td>\n</tr>\n<tr>\n<td>Abstract Factory</td>\n<td>Medium</td>\n<td>Medium</td>\n<td>Per family</td>\n</tr>\n</tbody>\n</table>\n<h2>Code Organization</h2>\n<pre><code>lib/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 patterns/\n\u2502   \u2502   \u251c\u2500\u2500 factory.dart\n\u2502   \u2502   \u251c\u2500\u2500 singleton.dart\n\u2502   \u2502   \u2514\u2500\u2500 observer.dart\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 user.dart\n\u2502   \u2514\u2500\u2500 services/\n\u2502       \u2514\u2500\u2500 database.dart\n\u2514\u2500\u2500 main.dart\n</code></pre>\n<h2>Advanced Example: Combined Patterns</h2>\n<p>\nHere\\'s an example combining multiple patterns:</p>\n<pre><code class=\"language-dart\">// Singleton Service Locator with Factory Pattern\nclass ServiceLocator {\n  static final ServiceLocator _instance = ServiceLocator._internal();\n  factory ServiceLocator() =&gt; _instance;\n  ServiceLocator._internal();\n\n  final _factories = &lt;Type, Object Function()&gt;{};\n  final _singletons = &lt;Type, Object&gt;{};\n\n  void registerFactory&lt;T&gt;(T Function() factory) {\n    _factories[T] = factory;\n  }\n\n  void registerSingleton&lt;T&gt;(T instance) {\n    _singletons[T] = instance;\n  }\n\n  T get&lt;T&gt;() {\n    if (_singletons.containsKey(T)) {\n      return _singletons[T] as T;\n    }\n    \n    if (_factories.containsKey(T)) {\n      return _factories[T]!() as T;\n    }\n    \n    throw Exception(\\'No registration found for type $T\\');\n  }\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>\nDesign patterns are essential tools in a developer\\'s toolkit. Choose patterns based on your specific needs and remember that sometimes simpler solutions are better than complex patterns.</p>\n<h2>References</h2>\n<p>1. &quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot;\n2. <a href=\"https://dart.dev/guides/language/effective-dart\">Dart Design Patterns</a>\n3. <a href=\"https://fluttersamples.com\">Flutter Architecture Samples</a></p>"},
gak(){return"/blog/advanced-dart-patterns"},
gaf(){return y.d},
gT(d){return null},
$ia2:1}
var z=a.updateTypes(["eM()"])
A.u6.prototype={
$0(){return C.a8},
$S:z+0};(function inheritance(){var w=a.inherit
w(A.eM,B.x)
w(A.u6,B.ba)})()
B.bW(b.typeUniverse,JSON.parse('{"eM":{"a2":[],"x":[]}}'))
var y={d:"Deep dive into advanced design patterns in Dart, with practical examples and best practices"}
var x={d:B.a7("G<c>")};(function constants(){C.a8=new A.eM(null)})()};
((a,b)=>{a[b]=a.current
a.eventLog.push({p:"main.dart.js_1",e:"endPart",h:b})})($__dart_deferred_initializers__,"AAuAd+9QJOBYRpmWJy7qfu/wTms=");
//# sourceMappingURL=main.dart.js_1.part.js.map

((a,b,c)=>{a[b]=a[b]||{}
a[b][c]=a[b][c]||[]
a[b][c].push({p:"main.dart.js_17",e:"beginPart"})})(self,"$__dart_deferred_initializers__","eventLog")
$__dart_deferred_initializers__.current=function(a,b,c,$){var B,D,A={
Dr(){D.b.m($.bf,new A.ua())},
eS:function eS(d){this.a=d},
ua:function ua(){}},C
B=c[0]
D=c[2]
A=a.updateHolder(c[9],A)
C=c[22]
A.eS.prototype={
F(d){return this.F(0)},
gJ(d){return"Performance Optimization Techniques for Jaspr Apps"},
ga4(){return"performance_optimization"},
gU(){return B.bP("2024-03-19")},
ga0(){return B.a(["performance","optimization","jaspr","web"],x.d)},
gah(d){return y.d},
gY(){return"Michael Rodriguez"},
gZ(){return"https://images.unsplash.com/photo-1551288049-bebda4e38f71"},
ga1(){return"https://images.unsplash.com/photo-1568602471122-7832951cc4c5"},
gal(d){return"<h1>Performance Optimization Techniques for Jaspr Apps</h1>\n<p>\nPerformance is crucial for web applications. In this guide, we\\'ll explore various techniques to optimize your Jaspr applications for better speed and user experience.</p>\n<h2>Understanding Performance Metrics</h2>\n<p>\nKey performance metrics to monitor:</p>\n<p>1. <strong>First Contentful Paint (FCP)</strong>\n2. <strong>Largest Contentful Paint (LCP)</strong>\n3. <strong>Time to Interactive (TTI)</strong>\n4. <strong>First Input Delay (FID)</strong>\n5. <strong>Cumulative Layout Shift (CLS)</strong></p>\n<h2>Code Splitting</h2>\n<p>\nImplement code splitting to reduce initial bundle size:</p>\n<pre><code class=\"language-dart\">// Lazy load components\nfinal lazyComponent = Component.lazy(() async {\n  await Future.delayed(Duration(milliseconds: 100));\n  return HeavyComponent();\n});\n\n// Usage in your component\ndiv([\n  Suspense(\n    fallback: LoadingSpinner(),\n    child: lazyComponent,\n  ),\n])\n</code></pre>\n<h2>Efficient State Management</h2>\n<p>\nOptimize state management to prevent unnecessary renders:</p>\n<pre><code class=\"language-dart\">@riverpod\nclass FilteredItems extends _$FilteredItems {\n  @override\n  List&lt;Item&gt; build(List&lt;String&gt; tags) {\n    final items = ref.watch(itemsProvider);\n    \n    // Memoize filtered results\n    return items.where((item) =&gt; \n      tags.isEmpty || item.tags.any((tag) =&gt; tags.contains(tag))\n    ).toList();\n  }\n}\n\n// Usage in component\nclass ItemList extends StatelessComponent {\n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    final items = context.watch(filteredItemsProvider);\n    \n    yield div(\n      classes: \\'grid gap-4\\',\n      [\n        for (final item in items)\n          ItemCard(item: item),\n      ],\n    );\n  }\n}\n</code></pre>\n<h2>Virtual Scrolling</h2>\n<p>\nImplement virtual scrolling for long lists:</p>\n<pre><code class=\"language-dart\">class VirtualList extends StatefulComponent {\n  final List&lt;Item&gt; items;\n  final double itemHeight;\n  \n  VirtualList({\n    required this.items,\n    this.itemHeight = 50,\n  });\n  \n  @override\n  State&lt;VirtualList&gt; createState() =&gt; _VirtualListState();\n}\n\nclass _VirtualListState extends State&lt;VirtualList&gt; {\n  int _startIndex = 0;\n  int _visibleItems = 10;\n  \n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    final visibleItems = component.items\n      .skip(_startIndex)\n      .take(_visibleItems);\n      \n    yield div(\n      classes: \\'relative\\',\n      attributes: {\n        \\'style\\': \\'height: ${component.items.length * component.itemHeight}px\\',\n      },\n      [\n        div(\n          attributes: {\n            \\'style\\': \\'transform: translateY(${_startIndex * component.itemHeight}px)\\',\n          },\n          [\n            for (final item in visibleItems)\n              ItemComponent(item: item),\n          ],\n        ),\n      ],\n    );\n  }\n}\n</code></pre>\n<h2>Image Optimization</h2>\n<p>\nOptimize images for better performance:</p>\n<pre><code class=\"language-dart\">img(\n  src: \\'image.jpg\\',\n  classes: \\'\\'\\'\n    w-full h-64 object-cover\n    blur-up lazyload\n  \\'\\'\\',\n  attributes: {\n    \\'loading\\': \\'lazy\\',\n    \\'srcset\\': \\'\\'\\'\n      image-400.jpg 400w,\n      image-800.jpg 800w,\n      image-1200.jpg 1200w\n    \\'\\'\\',\n    \\'sizes\\': \\'(max-width: 400px) 100vw, 50vw\\',\n    \\'data-src\\': \\'image-full.jpg\\',\n  },\n)\n</code></pre>\n<h2>Caching Strategies</h2>\n<p>\nImplement effective caching:</p>\n<pre><code class=\"language-dart\">class CacheService {\n  static final _instance = CacheService._();\n  factory CacheService() =&gt; _instance;\n  CacheService._();\n  \n  final _cache = &lt;String, dynamic&gt;{};\n  \n  T? get&lt;T&gt;(String key) =&gt; _cache[key] as T?;\n  \n  void set&lt;T&gt;(String key, T value) {\n    _cache[key] = value;\n  }\n  \n  Future&lt;T&gt; getOrFetch&lt;T&gt;(\n    String key,\n    Future&lt;T&gt; Function() fetch,\n  ) async {\n    if (_cache.containsKey(key)) {\n      return _cache[key] as T;\n    }\n    \n    final value = await fetch();\n    _cache[key] = value;\n    return value;\n  }\n}\n</code></pre>\n<h2>Component Optimization</h2>\n<p>\nOptimize component rendering:</p>\n<pre><code class=\"language-dart\">class OptimizedList extends StatelessComponent {\n  final List&lt;Item&gt; items;\n  \n  const OptimizedList({required this.items});\n  \n  @override\n  bool shouldComponentUpdate(OptimizedList oldComponent) {\n    return !ListEquality().equals(items, oldComponent.items);\n  }\n  \n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    yield div(\n      [\n        for (final item in items)\n          // Use const constructor for child components\n          const ItemComponent(),\n      ],\n    );\n  }\n}\n</code></pre>\n<h2>Memory Management</h2>\n<p>\nImplement proper memory management:</p>\n<pre><code class=\"language-dart\">class DisposableComponent extends StatefulComponent {\n  @override\n  State&lt;DisposableComponent&gt; createState() =&gt; _DisposableComponentState();\n}\n\nclass _DisposableComponentState extends State&lt;DisposableComponent&gt; {\n  StreamSubscription? _subscription;\n  \n  @override\n  void initState() {\n    super.initState();\n    _subscription = stream.listen((_) {});\n  }\n  \n  @override\n  void dispose() {\n    _subscription?.cancel();\n    super.dispose();\n  }\n  \n  @override\n  Iterable&lt;Component&gt; build(BuildContext context) sync* {\n    // Component implementation\n  }\n}\n</code></pre>\n<h2>Build Configuration</h2>\n<p>\nOptimize your build configuration:</p>\n<pre><code class=\"language-yaml\"># build.yaml\ntargets:\n  $default:\n    builders:\n      build_web_compilers|entrypoint:\n        options:\n          compiler: dart2js\n          dart2js_args:\n            - -O4\n            - --minify\n            - --trust-primitives\n            - --trust-type-annotations\n</code></pre>\n<h2>Performance Monitoring</h2>\n<p>\nImplement performance monitoring:</p>\n<pre><code class=\"language-dart\">class PerformanceMonitor {\n  static void logMetric(String name, double value) {\n    // Log to analytics service\n    print(\\'Performance metric: $name = $value\\');\n  }\n  \n  static void measureOperation(\n    String name,\n    Future&lt;void&gt; Function() operation,\n  ) async {\n    final startTime = DateTime.now();\n    await operation();\n    final duration = DateTime.now().difference(startTime);\n    \n    logMetric(name, duration.inMilliseconds.toDouble());\n  }\n}\n</code></pre>\n<h2>Best Practices</h2>\n<p>1. <strong>Component Design</strong></p>\n<p>- Keep components small and focused</p>\n<p>- Use const constructors where possible</p>\n<p>- Implement shouldComponentUpdate</p>\n<p>\n2. <strong>State Management</strong></p>\n<p>- Minimize state updates</p>\n<p>- Use appropriate state scoping</p>\n<p>- Implement efficient selectors</p>\n<p>\n3. <strong>Resource Loading</strong></p>\n<p>- Implement lazy loading</p>\n<p>- Optimize asset delivery</p>\n<p>- Use appropriate caching strategies</p>\n<h2>Tools and Resources</h2>\n<p>1. <a href=\"https://web.dev/vitals/\">Web Vitals</a>\n2. <a href=\"https://developers.google.com/web/tools/chrome-devtools/performance\">Chrome DevTools Performance Panel</a>\n3. <a href=\"https://developers.google.com/web/tools/lighthouse\">Lighthouse</a>\n4. <a href=\"https://www.webpagetest.org/\">WebPageTest</a></p>"},
gak(){return"/blog/performance_optimization"},
gaf(){return y.d},
gT(d){return null},
$ia2:1}
var z=a.updateTypes(["eS()"])
A.ua.prototype={
$0(){return C.ae},
$S:z+0};(function inheritance(){var w=a.inherit
w(A.eS,B.x)
w(A.ua,B.ba)})()
B.bW(b.typeUniverse,JSON.parse('{"eS":{"a2":[],"x":[]}}'))
var y={d:"Learn advanced techniques for optimizing your Jaspr applications, from code splitting to efficient state management and rendering optimizations."}
var x={d:B.a7("G<c>")};(function constants(){C.ae=new A.eS(null)})()};
((a,b)=>{a[b]=a.current
a.eventLog.push({p:"main.dart.js_17",e:"endPart",h:b})})($__dart_deferred_initializers__,"A22EPFoBvcIfXhrfmml8mFbpWtI=");
//# sourceMappingURL=main.dart.js_17.part.js.map

((a,b,c)=>{a[b]=a[b]||{}
a[b][c]=a[b][c]||[]
a[b][c].push({p:"main.dart.js_19",e:"beginPart"})})(self,"$__dart_deferred_initializers__","eventLog")
$__dart_deferred_initializers__.current=function(a,b,c,$){var B,D,A={
Dp(){D.b.m($.bf,new A.u8())},
eU:function eU(d){this.a=d},
u8:function u8(){}},C
B=c[0]
D=c[2]
A=a.updateHolder(c[11],A)
C=c[24]
A.eU.prototype={
F(d){return this.F(0)},
gJ(d){return"Building Responsive Web Apps with Jaspr"},
ga4(){return"responsive-design-jaspr"},
gU(){return B.bP("2024-02-25")},
ga0(){return B.a(["dart","jaspr","responsive","design","css"],x.d)},
gah(d){return y.a},
gY(){return"Sarah Johnson"},
gZ(){return"https://images.unsplash.com/photo-1508921912186-1d1a45ebb3c1"},
ga1(){return null},
gal(d){return"<h1>Building Responsive Web Apps with Jaspr</h1>\n<p>\nCreating responsive web applications that work seamlessly across all devices is crucial in today\\'s multi-device world. In this post, we\\'ll explore how to build responsive layouts using Jaspr and modern CSS techniques.</p>\n<h2>Understanding Responsive Design</h2>\n<p>\nResponsive design is about creating web applications that adapt to different screen sizes and devices. Key concepts include:</p>\n<p>1. <strong>Fluid Grids</strong>: Using relative units instead of fixed pixels\n2. <strong>Flexible Images</strong>: Images that scale within their containers\n3. <strong>Media Queries</strong>: CSS rules that apply based on device characteristics\n4. <strong>Mobile-First Approach</strong>: Designing for mobile devices first</p>\n<h2>Using Tailwind CSS with Jaspr</h2>\n<p>\nJaspr works great with Tailwind CSS. Here\\'s how to implement responsive designs:</p>\n<pre><code class=\"language-dart\">div(\n  classes: \\'\\'\\'\n    w-full           // Full width on all screens\n    md:w-1/2        // Half width on medium screens\n    lg:w-1/3        // One-third width on large screens\n    p-4             // Padding on all screens\n    md:p-6          // Larger padding on medium screens\n    lg:p-8          // Even larger padding on large screens\n  \\'\\'\\',\n  [\n    // Your content here\n  ],\n)\n</code></pre>\n<h2>Responsive Layout Patterns</h2>\n<h3>Stack to Grid</h3>\n<pre><code class=\"language-dart\">div(\n  classes: \\'\\'\\'\n    grid\n    grid-cols-1     // Single column on mobile\n    md:grid-cols-2  // Two columns on medium screens\n    lg:grid-cols-3  // Three columns on large screens\n    gap-4\n  \\'\\'\\',\n  [\n    for (final item in items)\n      ResponsiveCard(item: item),\n  ],\n)\n</code></pre>\n<h3>Sidebar Layout</h3>\n<pre><code class=\"language-dart\">div(\n  classes: \\'\\'\\'\n    flex\n    flex-col        // Stack on mobile\n    lg:flex-row     // Side by side on large screens\n    gap-4\n  \\'\\'\\',\n  [\n    // Sidebar\n    div(\n      classes: \\'\\'\\'\n        w-full\n        lg:w-64\n        lg:flex-shrink-0\n      \\'\\'\\',\n      [/* Sidebar content */],\n    ),\n    // Main content\n    div(\n      classes: \\'flex-grow\\',\n      [/* Main content */],\n    ),\n  ],\n)\n</code></pre>\n<h2>Responsive Images</h2>\n<p>\nHandle images responsively:</p>\n<pre><code class=\"language-dart\">div(\n  classes: \\'relative aspect-[16/9]\\',\n  [\n    img(\n      src: imageUrl,\n      classes: \\'\\'\\'\n        absolute\n        inset-0\n        w-full\n        h-full\n        object-cover\n        rounded-lg\n      \\'\\'\\',\n    ),\n  ],\n)\n</code></pre>\n<h2>Responsive Typography</h2>\n<p>\nImplement responsive text sizes:</p>\n<pre><code class=\"language-dart\">h1(\n  classes: \\'\\'\\'\n    text-2xl        // Base size\n    sm:text-3xl     // Larger on small screens\n    md:text-4xl     // Even larger on medium screens\n    lg:text-5xl     // Largest on large screens\n    font-bold\n    tracking-tight\n  \\'\\'\\',\n  [text(\\'Responsive Heading\\')],\n)\n</code></pre>\n<h2>Navigation Patterns</h2>\n<h3>Responsive Navigation Bar</h3>\n<pre><code class=\"language-dart\">nav(\n  classes: \\'\\'\\'\n    flex\n    flex-col        // Stack on mobile\n    sm:flex-row     // Row on larger screens\n    items-center\n    justify-between\n    p-4\n  \\'\\'\\',\n  [\n    // Logo\n    img(classes: \\'h-8 w-auto\\'),\n    \n    // Navigation links\n    div(\n      classes: \\'\\'\\'\n        flex\n        flex-col        // Stack on mobile\n        sm:flex-row     // Row on larger screens\n        gap-4\n        mt-4           // Spacing on mobile\n        sm:mt-0        // Remove spacing on larger screens\n      \\'\\'\\',\n      [\n        // Navigation links\n      ],\n    ),\n  ],\n)\n</code></pre>\n<h2>Best Practices</h2>\n<p>1. <strong>Mobile-First Development</strong></p>\n<p>- Start with mobile layouts</p>\n<p>- Add complexity for larger screens</p>\n<p>- Use min-width media queries</p>\n<p>\n2. <strong>Performance</strong></p>\n<p>- Optimize images for different screen sizes</p>\n<p>- Lazy load off-screen content</p>\n<p>- Minimize layout shifts</p>\n<p>\n3. <strong>Testing</strong></p>\n<p>- Test on real devices</p>\n<p>- Use browser dev tools</p>\n<p>- Check common breakpoints</p>\n<p>\n4. <strong>Accessibility</strong></p>\n<p>- Ensure touch targets are large enough</p>\n<p>- Maintain readable text sizes</p>\n<p>- Provide sufficient contrast</p>\n<h2>Common Breakpoints</h2>\n<pre><code class=\"language-dart\">// Tailwind CSS default breakpoints\nfinal breakpoints = {\n  \\'sm\\': \\'640px\\',   // Small screens\n  \\'md\\': \\'768px\\',   // Medium screens\n  \\'lg\\': \\'1024px\\',  // Large screens\n  \\'xl\\': \\'1280px\\',  // Extra large screens\n  \\'2xl\\': \\'1536px\\', // 2X large screens\n};\n</code></pre>\n<h2>Handling Dynamic Content</h2>\n<p>\nCreate flexible layouts that handle varying content:</p>\n<pre><code class=\"language-dart\">div(\n  classes: \\'\\'\\'\n    grid\n    grid-cols-1\n    sm:grid-cols-2\n    lg:grid-cols-3\n    auto-rows-fr    // Equal height rows\n    gap-4\n  \\'\\'\\',\n  [\n    for (final card in cards)\n      div(\n        classes: \\'\\'\\'\n          bg-white\n          rounded-lg\n          shadow\n          p-4\n          flex\n          flex-col\n        \\'\\'\\',\n        [\n          // Card header\n          div(classes: \\'flex-shrink-0\\', [/* Header content */]),\n          // Card body\n          div(classes: \\'flex-grow\\', [/* Body content */]),\n          // Card footer\n          div(classes: \\'flex-shrink-0\\', [/* Footer content */]),\n        ],\n      ),\n  ],\n)\n</code></pre>\n<h2>Conclusion</h2>\n<p>\nBuilding responsive web applications with Jaspr is straightforward when following these patterns and best practices. Remember to:</p>\n<p>- Start with mobile layouts</p>\n<p>- Use flexible and fluid layouts</p>\n<p>- Test across different devices</p>\n<p>- Optimize performance</p>\n<p>- Maintain accessibility</p>\n<p>\nBy following these guidelines, you can create web applications that provide an excellent user experience across all devices.</p>\n<p>\nStay tuned for more advanced topics on building responsive web applications with Jaspr!</p>"},
gak(){return"/blog/responsive-design-jaspr"},
gaf(){return y.a},
gT(d){return null},
$ia2:1}
var z=a.updateTypes(["eU()"])
A.u8.prototype={
$0(){return C.ag},
$S:z+0};(function inheritance(){var w=a.inherit
w(A.eU,B.x)
w(A.u8,B.ba)})()
B.bW(b.typeUniverse,JSON.parse('{"eU":{"a2":[],"x":[]}}'))
var y={a:"Learn how to create beautiful, responsive web applications using Jaspr and modern CSS techniques. Discover best practices for building layouts that work seamlessly across all devices."}
var x={d:B.a7("G<c>")};(function constants(){C.ag=new A.eU(null)})()};
((a,b)=>{a[b]=a.current
a.eventLog.push({p:"main.dart.js_19",e:"endPart",h:b})})($__dart_deferred_initializers__,"vXQtHElj3s6CKlOWHoDk1c18nD0=");
//# sourceMappingURL=main.dart.js_19.part.js.map
